#include "../my_math.h"
#include "../debug_fun/debug_fun.h"
#include <math.h>

#test test_ln_2
long long int i_min = 1000000 - 5;
long long int j_min = 100;
long long int i_max = 1000000;
long long int j_max = 1000;
int flag = check_fun(TST_LN, 0, i_min, j_min, i_max, j_max);
ck_assert_int_eq(flag, 1);

#test test_ln_3
long long int i_min = 1000000000 - 5;
long long int j_min = 100;
long long int i_max = 1000000000;
long long int j_max = 1000;
int flag = check_fun(TST_LN, 0, i_min, j_min, i_max, j_max);
ck_assert_int_eq(flag, 1);


#test test_exp_1
long long int i_min = 0;
long long int j_min = 0;
long long int i_max = 10000;
long long int j_max = 100;
int flag = check_fun(TST_EXP, 0, i_min, j_min, i_max, j_max);
ck_assert_int_eq(flag, 0);

#test test_exp_2
long long int i_max = 10000000;
long long int j_max = 1;
long long int i_min = i_max - 1;
long long int j_min = 0;
int flag = check_fun(TST_EXP, 0, i_min, j_min, i_max, j_max);
ck_assert_int_eq(flag, SUCCESS);


#test test_pow_1
long long int i_min = 0;
long long int j_min = -9;
long long int i_max = 8765.55645;
long long int j_max = 0;
int flag = check_fun(TST_POW, 0, i_min, j_min, i_max, j_max);
ck_assert_int_eq(flag, 1);

#test test_pow_2
long long int i_min = 1000000 - 5;
long long int j_min = 100;
long long int i_max = 1000000;
long long int j_max = 1000;
int flag = check_fun(TST_POW, 0, i_min, j_min, i_max, j_max);
ck_assert_int_eq(flag, 0);

#test test_pow_3
long long int i_min = 1000000000 - 5;
long long int j_min = 100;
long long int i_max = 1000000000;
long long int j_max = 100;
int flag = check_fun(TST_POW, 0, i_min, j_min, i_max, j_max);
ck_assert_int_eq(flag, 1);

#test test_sqrt_1
int flag = SUCCESS;
LD sum_1 = sqrt(10);
LD sum_2 = my_sqrt(10);
LD err = sum_1 - sum_2;
err = err < 0 ? -err : err;
if (err > 0.0000001) {
flag = FAILURE;
printf("TRY - |%.20Lf|\nMMY - |%.20Lf|\nERR - |%.20Lf|\n\n", sum_1, sum_2, err);
}
ck_assert_int_eq(flag, 1);

#test test_cos_1
long long int i_min = -100000000;
long long int j_min = 1;
long long int i_max = i_min + 5;
long long int j_max = j_min + 1;
int flag = check_fun(TST_COS, 0, i_min, j_min, i_max, j_max);
ck_assert_int_eq(flag, SUCCESS);


#test test_cos_2
long long int i_min = 0;
long long int j_min = 1;
long long int i_max = 100000;
long long int j_max = j_min + 1;
int flag = check_fun(TST_COS, 0, i_min, j_min, i_max, j_max);
ck_assert_int_eq(flag, SUCCESS);


#test test_cos_3
long long int i_min = (100000000 - 1);
long long int j_min = 1;
long long int i_max = i_min + 1;
long long int j_max = j_min + 1;
int flag = check_fun(TST_COS, 0, i_min, j_min, i_max, j_max);
ck_assert_int_eq(flag, SUCCESS);

#test test_sin_1
long long int i_min = -100000000;
long long int j_min = 1;
long long int i_max = i_min + 5;
long long int j_max = j_min + 1;
int flag = check_fun(TST_SIN, 0, i_min, j_min, i_max, j_max);
ck_assert_int_eq(flag, SUCCESS);


#test test_sin_2
long long int i_min = 0;
long long int j_min = 1;
long long int i_max = 100000;
long long int j_max = j_min + 1;
int flag = check_fun(TST_SIN, 0, i_min, j_min, i_max, j_max);
ck_assert_int_eq(flag, SUCCESS);


#test test_sin_3
long long int i_min = (100000000 - 1);
long long int j_min = 1;
long long int i_max = i_min + 1;
long long int j_max = j_min + 1;
int flag = check_fun(TST_SIN, 0, i_min, j_min, i_max, j_max);
ck_assert_int_eq(flag, SUCCESS);


#test test_tan_1
long long int i_min = -100000000;
long long int j_min = 1;
long long int i_max = i_min + 5;
long long int j_max = j_min + 1;
int flag = check_fun(TST_TAN, 0, i_min, j_min, i_max, j_max);
ck_assert_int_eq(flag, SUCCESS);


#test test_tan_2
long long int i_min = 0;
long long int j_min = 1;
long long int i_max = 100000;
long long int j_max = j_min + 1;
int flag = check_fun(TST_TAN, 0, i_min, j_min, i_max, j_max);
ck_assert_int_eq(flag, SUCCESS);


#test test_tan_3
long long int i_min = (100000000 - 1);
long long int j_min = 1;
long long int i_max = i_min + 1;
long long int j_max = j_min + 1;
int flag = check_fun(TST_TAN, 0, i_min, j_min, i_max, j_max);
ck_assert_int_eq(flag, SUCCESS);

#test test_fmod_1
long long int i_min = -100000000;
long long int j_min = 1;
long long int i_max = i_min + 5;
long long int j_max = j_min + 1;
int flag = check_fun(TST_FMOD, 0, i_min, j_min, i_max, j_max);
ck_assert_int_eq(flag, SUCCESS);


#test test_fmod_2
long long int i_min = 0;
long long int j_min = 1;
long long int i_max = 100000;
long long int j_max = j_min + 1;
int flag = check_fun(TST_FMOD, 0, i_min, j_min, i_max, j_max);
ck_assert_int_eq(flag, SUCCESS);


#test test_fmod_3
long long int i_min = (100000000 - 1);
long long int j_min = 1;
long long int i_max = i_min + 1;
long long int j_max = j_min + 1;
int flag = check_fun(TST_FMOD, 0, i_min, j_min, i_max, j_max);
ck_assert_int_eq(flag, SUCCESS);

//____________________acos____________________

#test test_my_acos_1
ck_assert_ldouble_eq_tol(my_acos(0), acos(0), 15);

#test test_my_acos_2
ck_assert_ldouble_eq_tol(my_acos(0.1), acos(0.1), 15);

#test test_my_acos_3
ck_assert_ldouble_eq_tol(my_acos(0.01), acos(0.01), 15);

#test test_my_acos_4
ck_assert_ldouble_eq_tol(my_acos(-0.001), acos(-0.001), 15);

#test test_my_acos_5
ck_assert_ldouble_eq_tol(my_acos(0.0001), acos(0.0001), 15);

#test test_my_acos_6
ck_assert_ldouble_eq_tol(my_acos(-0.00001), acos(-0.00001), 15);

#test test_my_acos_7
ck_assert_ldouble_eq_tol(my_acos(0.000001), acos(0.000001), 15);

#test test_my_acos_8
ck_assert_ldouble_eq_tol(my_acos(-0.000001), acos(-0.000001), 15);

#test test_my_acos_9
ck_assert_ldouble_eq_tol(my_acos(1), acos(1), 15);

#test test_my_acos_10
ck_assert_ldouble_eq_tol(my_acos(-1), acos(-1), 15);

#test test_my_acos_11
ck_assert_ldouble_eq_tol(my_acos(0.999999), acos(0.999999), 15);

#test test_my_acos_12
ck_assert_ldouble_eq_tol(my_acos(-0.999999), acos(-0.999999), 15);

#test test_my_acos_13
ck_assert_ldouble_eq_tol(my_acos(1.000000), acos(1.000000), 15);

#test test_my_acos_14
ck_assert_ldouble_eq_tol(my_acos(0.5), acos(0.5), 15);

#test test_my_acos_15
ck_assert_ldouble_eq_tol(my_acos(0.89), acos(0.89), 15);

#test test_my_acos_16
ck_assert_ldouble_eq_tol(my_acos(-0.75), acos(-0.75), 15);

#test test_my_acos_17
ck_assert_ldouble_eq_tol(my_acos(-0.300009), acos(-0.300009), 15);

#test test_my_acos_18
ck_assert_ldouble_nan(my_acos(1.000001));

#test test_my_acos_19
ck_assert_ldouble_nan(my_acos(-1.000001));

#test test_my_acos_20
ck_assert_ldouble_nan(my_acos(10));

#test test_my_acos_21
ck_assert_ldouble_nan(my_acos(999999));

#test test_my_acos_22
ck_assert_ldouble_nan(my_acos(999990.99));

#test test_my_acos_23
ck_assert_ldouble_nan(my_acos(-50.999));


//____________________asin____________________

#test test_my_asin_1
ck_assert_ldouble_eq_tol(my_asin(0), asin(0), 15);

#test test_my_asin_2
double x = 0.1;
ck_assert_ldouble_eq_tol(my_asin(x), asin(x), 15);

#test test_my_asin_3
ck_assert_ldouble_eq_tol(my_asin(0.01), asin(0.01), 15);

#test test_my_asin_4
ck_assert_ldouble_eq_tol(my_asin(-0.001), asin(-0.001), 15);

#test test_my_asin_5
ck_assert_ldouble_eq_tol(my_asin(0.0001), asin(0.0001), 15);

#test test_my_asin_6
ck_assert_ldouble_eq_tol(my_asin(-0.00001), asin(-0.00001), 15);

#test test_my_asin_7
long double a = my_asin(0.000001);
long double b = asin(0.000001);
ck_assert_ldouble_eq_tol(a, b, 15);

#test test_my_asin_8
ck_assert_ldouble_eq_tol(my_asin(-0.000001), asin(-0.000001), 15);

#test test_my_asin_9
ck_assert_ldouble_eq_tol(my_asin(1), asin(1), 15);

#test test_my_asin_10
ck_assert_ldouble_eq_tol(my_asin(-1), asin(-1), 15);

#test test_my_asin_11
ck_assert_ldouble_eq_tol(my_asin(0.999999), asin(0.999999), 15);

#test test_my_asin_12
ck_assert_ldouble_eq_tol(my_asin(-0.999999), asin(-0.999999), 15);

#test test_my_asin_13
ck_assert_ldouble_eq_tol(my_asin(1.000000), asin(1.000000), 15);

#test test_my_asin_14
ck_assert_ldouble_eq_tol(my_asin(0.5), asin(0.5), 15);

#test test_my_asin_15
ck_assert_ldouble_eq_tol(my_asin(0.89), asin(0.89), 15);

#test test_my_asin_16
ck_assert_ldouble_eq_tol(my_asin(-0.75), asin(-0.75), 15);

#test test_my_asin_17
ck_assert_ldouble_eq_tol(my_asin(-0.300009), asin(-0.300009), 15);

#test test_my_asin_18
ck_assert_ldouble_nan(my_asin(1.000001));

#test test_my_asin_19
ck_assert_ldouble_nan(my_asin(-1.000001));

#test test_my_asin_20
ck_assert_ldouble_nan(my_asin(10));

#test test_my_asin_21
ck_assert_ldouble_nan(my_asin(999999));

#test test_my_asin_22
ck_assert_ldouble_nan(my_asin(999990.99));

#test test_my_asin_23
ck_assert_ldouble_nan(my_asin(-50.999));

#test test_my_asin_24
ck_assert_ldouble_nan(my_asin(MY_NAN));

#test test_my_asin_25
ck_assert_ldouble_eq_tol(my_asin(-0), asin(-0), 15);

//____________________atan____________________

#test test_my_atan_1
ck_assert_ldouble_eq_tol(my_atan(0), atan(0), 15);

#test test_my_atan_2
ck_assert_ldouble_eq_tol(my_atan(0.1), atan(0.1), 15);

#test test_my_atan_3
ck_assert_ldouble_eq_tol(my_atan(0.01), atan(0.01), 15);

#test test_my_atan_4
double x = -0.001;
ck_assert_ldouble_eq_tol(my_atan(x), atan(x), 15);

#test test_my_atan_5
ck_assert_ldouble_eq_tol(my_atan(0.0001), atan(0.0001), 15);

#test test_my_atan_6
ck_assert_ldouble_eq_tol(my_atan(-0.00001), atan(-0.00001), 15);

#test test_my_atan_7
ck_assert_ldouble_eq_tol(my_atan(0.000001), atan(0.000001), 15);

#test test_my_atan_8
ck_assert_ldouble_eq_tol(my_atan(-0.000001), atan(-0.000001), 15);

#test test_my_atan_9
ck_assert_ldouble_eq_tol(my_atan(1), atan(1), 15);

#test test_my_atan_10
ck_assert_ldouble_eq_tol(my_atan(-1), atan(-1), 15);

#test test_my_atan_11
ck_assert_ldouble_eq_tol(my_atan(0.999999), atan(0.999999), 15);

#test test_my_atan_12
ck_assert_ldouble_eq_tol(my_atan(-0.999999), atan(-0.999999), 15);

#test test_my_atan_13
ck_assert_ldouble_eq_tol(my_atan(1.000000), atan(1.000000), 15);

#test test_my_atan_14
ck_assert_ldouble_eq_tol(my_atan(0.5), atan(0.5), 15);

#test test_my_atan_15
ck_assert_ldouble_eq_tol(my_atan(0.89), atan(0.89), 15);

#test test_my_atan_16
ck_assert_ldouble_eq_tol(my_atan(-0.75), atan(-0.75), 15);

#test test_my_atan_17
ck_assert_ldouble_eq_tol(my_atan(-0.300009), atan(-0.300009), 15);

#test test_my_atan_18
ck_assert_ldouble_eq_tol(my_atan(1.000001), atan(1.000001), 15);

#test test_my_atan_19
ck_assert_ldouble_eq_tol(my_atan(-1.000001), atan(-1.000001), 15);

#test test_my_atan_20
ck_assert_ldouble_eq_tol(my_atan(10), atan(10), 15);

#test test_my_atan_21
ck_assert_ldouble_eq_tol(my_atan(999999), atan(999999), 15);

#test test_my_atan_22
ck_assert_ldouble_eq_tol(my_atan(999990.99), atan(999990.99), 15);

#test test_my_atan_23
ck_assert_ldouble_eq_tol(my_atan(-50.999), atan(-50.999), 15);


//____________________ceil____________________

#test test_my_ceil_1
ck_assert_ldouble_eq(my_ceil(0), ceil(0));

#test test_my_ceil_2
ck_assert_ldouble_eq(my_ceil(0.0005), ceil(0.0005));

#test test_my_ceil_3
ck_assert_ldouble_eq(my_ceil(0.98), ceil(0.98));

#test test_my_ceil_4
ck_assert_ldouble_eq(my_ceil(0.999999), ceil(0.999999));

#test test_my_ceil_5
ck_assert_ldouble_eq(my_ceil(0.99999999999999999999), ceil(0.99999999999999999999));

#test test_my_ceil_6
ck_assert_ldouble_eq(my_ceil(987654321.9999999999999999999999999999999999999999), ceil(987654321.9999999999999999999999999999999999999999));

#test test_my_ceil_7
ck_assert_ldouble_eq(my_ceil(-0.99999999999999999999), ceil(-0.99999999999999999999));

#test test_my_ceil_8
ck_assert_ldouble_eq(my_ceil(-987654321.9999999999999999999999999999999999999999), ceil(-987654321.9999999999999999999999999999999999999999));

#test test_my_ceil_9
ck_assert_ldouble_eq(my_ceil(9999999999999999), ceil(9999999999999999));

#test test_my_ceil_10
ck_assert_ldouble_eq(my_ceil(99999999999999999), ceil(99999999999999999));

#test test_my_ceil_11
ck_assert_ldouble_eq(my_ceil(-9999999999999999), ceil(-9999999999999999));

#test test_my_ceil_12
ck_assert_ldouble_eq(my_ceil(-5.5000000), ceil(-5.5000000));

#test test_my_ceil_13
ck_assert_ldouble_eq(my_ceil(7), ceil(7));

#test test_my_ceil_14
ck_assert_ldouble_eq(my_ceil(-0.0), ceil(-0.0));

#test test_my_ceil_15
ck_assert_ldouble_eq(my_ceil(-0.000001), ceil(-0.000001));

#test test_my_ceil_16
ck_assert_ldouble_eq(my_ceil(-0.0000000000000000001), ceil(-0.0000000000000000001));

#test test_my_ceil_17
ck_assert_ldouble_eq(my_ceil(0.0000000000000000001), ceil(0.0000000000000000001));

#test test_my_ceil_18
ck_assert_ldouble_eq(my_ceil(-111111111.0000000000000000001), ceil(-111111111.0000000000000000001));

#test test_my_ceil_19
ck_assert_ldouble_eq(my_ceil(-123456789.000001), ceil(-123456789.000001));

#test test_my_ceil_20
ck_assert_ldouble_eq(my_ceil(123456789.000001), ceil(123456789.000001));


//____________________floor____________________

#test test_my_floor_1
ck_assert_ldouble_eq(my_floor(0), floor(0));

#test test_my_floor_2
ck_assert_ldouble_eq(my_floor(0.0005), floor(0.0005));

#test test_my_floor_3
ck_assert_ldouble_eq(my_floor(0.98), floor(0.98));

#test test_my_floor_4
ck_assert_ldouble_eq(my_floor(0.999999), floor(0.999999));

#test test_my_floor_5
ck_assert_ldouble_eq(my_floor(0.99999999999999999999), floor(0.99999999999999999999));

#test test_my_floor_6
ck_assert_ldouble_eq(my_floor(987654321.9999999999999999999999999999999999999999), floor(987654321.9999999999999999999999999999999999999999));

#test test_my_floor_7
ck_assert_ldouble_eq(my_floor(-0.99999999999999999999), floor(-0.99999999999999999999));

#test test_my_floor_8
ck_assert_ldouble_eq(my_floor(-987654321.9999999999999999999999999999999999999999), floor(-987654321.9999999999999999999999999999999999999999));

#test test_my_floor_9
ck_assert_ldouble_eq(my_floor(9999999999999999), floor(9999999999999999));

#test test_my_floor_10
ck_assert_ldouble_eq(my_floor(99999999999999999), floor(99999999999999999));

#test test_my_floor_11
ck_assert_ldouble_eq(my_floor(-9999999999999999), floor(-9999999999999999));

#test test_my_floor_12
ck_assert_ldouble_eq(my_floor(-5.5000000), floor(-5.5000000));

#test test_my_floor_13
ck_assert_ldouble_eq(my_floor(7), floor(7));

#test test_my_floor_14
ck_assert_ldouble_eq(my_floor(-0.0), floor(-0.0));

#test test_my_floor_15
ck_assert_ldouble_eq(my_floor(-0.000001), floor(-0.000001));

#test test_my_floor_16
ck_assert_ldouble_eq(my_floor(-0.0000000000000000001), floor(-0.0000000000000000001));

#test test_my_floor_17
ck_assert_ldouble_eq(my_floor(0.0000000000000000001), floor(0.0000000000000000001));

#test test_my_floor_18
ck_assert_ldouble_eq(my_floor(-111111111.0000000000000000001), floor(-111111111.0000000000000000001));

#test test_my_floor_19
ck_assert_ldouble_eq(my_floor(-123456789.000001), floor(-123456789.000001));

#test test_my_floor_20
ck_assert_ldouble_eq(my_floor(123456789.000001), floor(123456789.000001));

#test test_my_abs_1
ck_assert_int_eq(my_abs(123456789), abs(123456789));

#test test_my_abs_2
ck_assert_int_eq(my_abs(-123456789), abs(-123456789));

#test test_my_fabs_1
ck_assert_ldouble_eq(my_fabs(123456789.000001), fabs(123456789.000001));

#test test_my_fabs_2
ck_assert_ldouble_eq(my_fabs(-123456789.000001), fabs(-123456789.000001));


#test test_my_pow_4
ck_assert_ldouble_eq_tol(my_pow(3,-0), pow(3,-0), 7);


#test test_my_pow_5
ck_assert_ldouble_eq_tol(my_pow(MY_NAN,0), pow(MY_NAN,0), 7);


#test test_my_pow_7
ck_assert_ldouble_eq_tol(my_pow(MY_NAN,-0), pow(MY_NAN,-0), 7);

#test test_my_pow_8
ck_assert_ldouble_eq_tol(my_pow(+0,MY_INFINITY), pow(+0,MY_INFINITY), 7);


#test test_my_pow_9
ck_assert_ldouble_eq_tol(my_pow(MY_INFINITY,+0), pow(MY_INFINITY,+0), 7);


#test test_my_pow_10
ck_assert_ldouble_eq_tol(my_pow(MY_INFINITY,0), pow(MY_INFINITY,0), 7);